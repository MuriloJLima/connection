{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Slider from '@react-native-community/slider';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar WIDTH = Dimensions.get('window').width - 125;\nvar InputSlider = function InputSlider(_ref) {\n  var min = _ref.min,\n    max = _ref.max;\n  var _useState = useState(500),\n    _useState2 = _slicedToArray(_useState, 2),\n    sliderValue = _useState2[0],\n    setSliderValue = _useState2[1];\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      style: styles.texto,\n      children: [\"R$ \", sliderValue]\n    }), _jsxs(View, {\n      style: styles.labelsContainer,\n      children: [_jsx(Text, {\n        style: styles.label,\n        children: min\n      }), _jsx(Text, {\n        style: styles.label,\n        children: max\n      })]\n    }), _jsx(Slider, {\n      style: {\n        width: 300,\n        height: 60\n      },\n      minimumValue: 500,\n      maximumValue: 12500,\n      onValueChange: function onValueChange(value) {\n        return setSliderValue(value);\n      },\n      value: sliderValue,\n      step: 100,\n      thumbTintColor: \"#02CB7F\",\n      minimumTrackTintColor: \"#02CB7F\",\n      maximumTrackTintColor: \"#000\"\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  texto: {\n    fontSize: 26\n  },\n  labelsContainer: {\n    width: WIDTH,\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  label: {\n    color: '#777'\n  }\n});\nexport default InputSlider;","map":{"version":3,"names":["React","useState","View","StyleSheet","Text","Dimensions","Slider","jsxs","_jsxs","jsx","_jsx","WIDTH","get","width","InputSlider","_ref","min","max","_useState","_useState2","_slicedToArray","sliderValue","setSliderValue","style","styles","container","children","texto","labelsContainer","label","height","minimumValue","maximumValue","onValueChange","value","step","thumbTintColor","minimumTrackTintColor","maximumTrackTintColor","create","justifyContent","alignItems","fontSize","flexDirection","color"],"sources":["C:/Users/marcus vinicius/Documents/TCC/E-PLANNER-MAIN-main/E-PLANNER-MAIN-main/src/components/inputSlider.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { View, StyleSheet, Text, Dimensions, } from \"react-native\";\nimport Slider from '@react-native-community/slider';\n\nconst WIDTH = Dimensions.get('window').width - 125;\n\n\n\nconst InputSlider = ({ min, max }) => {\n\n    const [sliderValue, setSliderValue] = useState(500);\n\n    return (\n        <View style={styles.container}>\n            <Text\n                style={styles.texto}\n            >R$ {sliderValue}</Text>\n            <View style={styles.labelsContainer}>\n                <Text style={styles.label}>{min}</Text>\n                <Text style={styles.label}>{max}</Text>\n            </View>\n            <Slider\n                style={{ width: 300, height: 60 }}\n                minimumValue={500}\n                maximumValue={12500}\n                onValueChange={(value) => setSliderValue(value)}\n                value={sliderValue}\n                step={100}\n                thumbTintColor=\"#02CB7F\"\n                minimumTrackTintColor=\"#02CB7F\"\n                maximumTrackTintColor=\"#000\" />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    texto: {\n        fontSize: 26,\n    },\n    labelsContainer: {\n        width: WIDTH,\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n    },\n    label: {\n        color: '#777',\n    },\n})\n\nexport default InputSlider"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAExC,OAAOC,MAAM,MAAM,gCAAgC;AAAC,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAEpD,IAAMC,KAAK,GAAGN,UAAU,CAACO,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK,GAAG,GAAG;AAIlD,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,GAAG,GAAAD,IAAA,CAAHC,GAAG;IAAEC,GAAG,GAAAF,IAAA,CAAHE,GAAG;EAE3B,IAAAC,SAAA,GAAsCjB,QAAQ,CAAC,GAAG,CAAC;IAAAkB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAElC,OACIX,KAAA,CAACN,IAAI;IAACqB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC1BlB,KAAA,CAACJ,IAAI;MACDmB,KAAK,EAAEC,MAAM,CAACG,KAAM;MAAAD,QAAA,GACvB,KAAG,EAACL,WAAW;IAAA,EAAQ,EACxBb,KAAA,CAACN,IAAI;MAACqB,KAAK,EAAEC,MAAM,CAACI,eAAgB;MAAAF,QAAA,GAChChB,IAAA,CAACN,IAAI;QAACmB,KAAK,EAAEC,MAAM,CAACK,KAAM;QAAAH,QAAA,EAAEV;MAAG,EAAQ,EACvCN,IAAA,CAACN,IAAI;QAACmB,KAAK,EAAEC,MAAM,CAACK,KAAM;QAAAH,QAAA,EAAET;MAAG,EAAQ;IAAA,EACpC,EACPP,IAAA,CAACJ,MAAM;MACHiB,KAAK,EAAE;QAAEV,KAAK,EAAE,GAAG;QAAEiB,MAAM,EAAE;MAAG,CAAE;MAClCC,YAAY,EAAE,GAAI;MAClBC,YAAY,EAAE,KAAM;MACpBC,aAAa,EAAE,SAAAA,cAACC,KAAK;QAAA,OAAKZ,cAAc,CAACY,KAAK,CAAC;MAAA,CAAC;MAChDA,KAAK,EAAEb,WAAY;MACnBc,IAAI,EAAE,GAAI;MACVC,cAAc,EAAC,SAAS;MACxBC,qBAAqB,EAAC,SAAS;MAC/BC,qBAAqB,EAAC;IAAM,EAAG;EAAA,EAChC;AAEf,CAAC;AAED,IAAMd,MAAM,GAAGrB,UAAU,CAACoC,MAAM,CAAC;EAC7Bd,SAAS,EAAE;IACPe,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EAChB,CAAC;EACDd,KAAK,EAAE;IACHe,QAAQ,EAAE;EACd,CAAC;EACDd,eAAe,EAAE;IACbf,KAAK,EAAEF,KAAK;IACZgC,aAAa,EAAE,KAAK;IACpBH,cAAc,EAAE;EACpB,CAAC;EACDX,KAAK,EAAE;IACHe,KAAK,EAAE;EACX;AACJ,CAAC,CAAC;AAEF,eAAe9B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}